name: Build and Deploy

on:
  - push
  - pull_request

jobs:
  job1:
    runs-on: ubuntu-latest

      services:
        postgres:
          image: postgres:13
          env:
            POSTGRES_USER: ${{ secrets.DATABASE_USER }}
            POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
          networks:
            - postgres-network
          ports:
            - 5432:5432
          options: >-
            --health-cmd "pg_isready -U postgres -d ${POSTGRES_DB}"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

networks:
  postgres-network:
    driver: bridge

    steps:
      - name: Pulling git repo
        uses: actions/checkout@v2

      - name: Instalando o Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12.4"

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Instalar dependências
        run: |
          pip install -r BackEnd/requirements.txt
          pip install psycopg2-binary

      - name: Testando conexão com o PostgreSQL
        run: |
          echo "Testando conexão com o banco..."
          pg_isready -h localhost -p 5432 -U postgres || (echo "Banco de dados indisponível!" && exit 1)

      - name: Esperando o PostgreSQL ficar pronto
        run: sleep 30

      - name: Definir variáveis de ambiente do banco
        run: |
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> $GITHUB_ENV
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> $GITHUB_ENV
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> $GITHUB_ENV

      - name: Criar script Python para debug
        run: |
          echo "import os" > debug_env.py
          echo "print(f'DATABASE_USER: {os.getenv(\"DATABASE_USER\")}')" >> debug_env.py
          echo "print(f'DATABASE_PASSWORD: {os.getenv(\"DATABASE_PASSWORD\")}')" >> debug_env.py
          echo "print(f'DATABASE_NAME: {os.getenv(\"DATABASE_NAME\")}')" >> debug_env.py
          echo "print(f'DATABASE_HOST: {os.getenv(\"DATABASE_HOST\")}')" >> debug_env.py

      - name: Executar script Python de debug
        run: python debug_env.py

      - name: Executar pytest
        run: pytest BackEnd/teste.py
